--- a/src/pkcs11/framework-pkcs15.c
+++ b/src/pkcs11/framework-pkcs15.c
@@ -1111,6 +1111,18 @@
 }
 
 
+static int get_num_slots(struct sc_card *card)
+{
+	size_t i;
+	for (i=0; i<list_size(&virtual_slots); i++) {
+		sc_pkcs11_slot_t *slot = (sc_pkcs11_slot_t *) list_get_at(&virtual_slots, i);
+		if (slot && slot->p11card && slot->p11card->card == card)
+			return slot->p11card->num_slots;
+	}
+	return 0;
+}
+
+
 static void
 pkcs15_init_slot(struct sc_pkcs15_card *p15card, struct sc_pkcs11_slot *slot,
 		struct sc_pkcs15_object *auth, struct sc_app_info *app_info)
@@ -1161,7 +1173,7 @@
 			size_t pin_len = 0;
 			if (auth->label[0] && strncmp(auth->label, "PIN", 4) != 0)
 				pin_len = strlen(auth->label);
-			if (pin_len) {
+			if (pin_len && get_num_slots(p15card->card) > 1) {
 				size_t tokeninfo_len = 0;
 				if (p15card->tokeninfo && p15card->tokeninfo->label)
 					tokeninfo_len = strlen(p15card->tokeninfo->label);
@@ -1186,10 +1198,13 @@
 							")", 32 - max_tokeninfo_len-2-pin_len);
 				}
 			} else {
+				char p15card_tokeninfo_label[33] = { 0 };
+				if (p15card->tokeninfo)
+					strncpy(p15card_tokeninfo_label, p15card->tokeninfo->label, 32);
 				/* PIN label is empty or just says useless "PIN",
 				 * print only token label */
 				strcpy_bp(slot->token_info.label,
-						p15card->tokeninfo ? p15card->tokeninfo->label : "",
+						p15card->tokeninfo ? p15card_tokeninfo_label : "",
 						32);
 			}
 			/* Some applications (NSS) do not like the colons in the
@@ -1208,11 +1223,14 @@
 		slot->token_info.ulMinPinLen = pin_info->attrs.pin.min_length;
 	}
 	else {
+		char p15card_tokeninfo_label[33] = { 0 };
+		if (p15card->tokeninfo)
+			strncpy(p15card_tokeninfo_label, p15card->tokeninfo->label, 32);
 		/* choose reasonable defaults */
 		slot->token_info.ulMaxPinLen = 8;
 		slot->token_info.ulMinPinLen = 4;
 		strcpy_bp(slot->token_info.label,
-				p15card->tokeninfo ? p15card->tokeninfo->label : "",
+				p15card->tokeninfo ? p15card_tokeninfo_label : "",
 				32);
 	}
 
@@ -1610,6 +1628,10 @@
 	}
 	sc_log(context, "create slots flags 0x%X", cs_flags);
 
+	if (p11card) {
+		p11card->num_slots = 0;
+	}
+
 	/* Find out framework data corresponding to the given application */
 	fw_data = get_fw_data(p11card, app_info, &idx);
 	if (!fw_data)   {
@@ -1666,6 +1688,13 @@
 		auth_count = rc;
 		sc_log(context, "Found %d authentication objects", auth_count);
 
+		for (i = 0; i < auth_count; i++) {
+			struct sc_pkcs15_auth_info *pin_info = (struct sc_pkcs15_auth_info*)auths[i]->data;
+			if (!_is_slot_auth_object(pin_info))
+				continue;
+			p11card->num_slots++;
+		}
+
 		for (i = 0; i < auth_count; i++) {
 			struct sc_pkcs15_auth_info *pin_info = (struct sc_pkcs15_auth_info*)auths[i]->data;
 			struct sc_pkcs11_slot *islot = NULL;
@@ -1689,6 +1718,10 @@
 		}
 	}
 	else   {
+		if (auth_user_pin && (cs_flags & SC_PKCS11_SLOT_FOR_PIN_USER))
+			p11card->num_slots++;
+		if (auth_sign_pin && (cs_flags & SC_PKCS11_SLOT_FOR_PIN_SIGN))
+			p11card->num_slots++;
 		sc_log(context, "User/Sign PINs %p/%p", auth_user_pin, auth_sign_pin);
 		if (auth_user_pin && (cs_flags & SC_PKCS11_SLOT_FOR_PIN_USER)) {
 			/* For the UserPIN of the first slot create slot */
--- a/src/pkcs11/sc-pkcs11.h
+++ b/src/pkcs11/sc-pkcs11.h
@@ -201,6 +201,9 @@
 	/* List of supported mechanisms */
 	struct sc_pkcs11_mechanism_type **mechanisms;
 	unsigned int nmechanisms;
+
+	/* Number o virtual slots the card occupies */
+	int num_slots;
 };
 
 /* If the slot did already show with `C_GetSlotList`, then we need to keep this

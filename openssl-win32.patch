Index: openssl/crypto/conf/conf_mod.c
===================================================================
--- openssl.orig/crypto/conf/conf_mod.c
+++ openssl/crypto/conf/conf_mod.c
@@ -683,8 +683,12 @@ char *CONF_get1_default_config_file(void
 
     t = X509_get_default_cert_area();
 #ifndef OPENSSL_SYS_VMS
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+    sep = "\\";
+#else
     sep = "/";
 #endif
+#endif
     size = strlen(t) + strlen(sep) + strlen(OPENSSL_CONF) + 1;
     file = OPENSSL_malloc(size);
 
Index: openssl/crypto/cversion.c
===================================================================
--- openssl.orig/crypto/cversion.c
+++ openssl/crypto/cversion.c
@@ -7,6 +7,12 @@
  * https://www.openssl.org/source/license.html
  */
 
+#include <openssl/opensslconf.h>
+
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+#include <windows.h>
+#endif
+
 #include "internal/cryptlib.h"
 
 #include "buildinf.h"
@@ -64,7 +70,28 @@ const char *OpenSSL_version(int t)
         return PLATFORM;
     case OPENSSL_DIR:
 #ifdef OPENSSLDIR
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+        static char temp[PATH_MAX + 1];
+        long rc;
+        HKEY hKey;
+        rc = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\eOI", 0, KEY_READ, &hKey);
+        if (rc == ERROR_SUCCESS) {
+            WCHAR wtemp[PATH_MAX + 1];
+            DWORD wtemp_len = PATH_MAX - 1;
+            rc = RegQueryValueExW(hKey, L"HomeDir", NULL, NULL, (LPBYTE) wtemp, &wtemp_len);
+            if (rc == ERROR_SUCCESS) {
+                RegCloseKey(hKey);
+                strcpy(temp, "OPENSSLDIR: \"");
+                WideCharToMultiByte(CP_ACP, 0, wtemp, wtemp_len, &temp[strlen(temp)], PATH_MAX - strlen(temp) - 1, NULL, NULL);
+                strcat(temp, "\"");
+                return temp;
+            }
+            RegCloseKey(hKey);
+        }
+        return "OPENSSLDIR: N/A";
+#else
         return "OPENSSLDIR: \"" OPENSSLDIR "\"";
+#endif
 #else
         return "OPENSSLDIR: N/A";
 #endif
Index: openssl/crypto/engine/eng_list.c
===================================================================
--- openssl.orig/crypto/engine/eng_list.c
+++ openssl/crypto/engine/eng_list.c
@@ -11,6 +11,12 @@
 /* We need to use some engine deprecated APIs */
 #define OPENSSL_SUPPRESS_DEPRECATED
 
+#include <openssl/opensslconf.h>
+
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+#include <windows.h>
+#endif
+
 #include "eng_local.h"
 
 /*
@@ -460,6 +466,25 @@ ENGINE *ENGINE_by_id(const char *id)
     if (strcmp(id, "dynamic")) {
         if ((load_dir = ossl_safe_getenv("OPENSSL_ENGINES")) == NULL)
             load_dir = ENGINESDIR;
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+        if (load_dir == NULL) {
+            static char temp[PATH_MAX + 1];
+            long rc;
+            HKEY hKey;
+            load_dir = "engines";
+            rc = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\eOI", 0, KEY_READ, &hKey);
+            if (rc == ERROR_SUCCESS) {
+                WCHAR wtemp[PATH_MAX + 1];
+                DWORD wtemp_len = PATH_MAX;
+                rc = RegQueryValueExW(hKey, L"EnginesDir", NULL, NULL, (LPBYTE) wtemp, &wtemp_len);
+                if (rc == ERROR_SUCCESS) {
+                    WideCharToMultiByte(CP_ACP, 0, wtemp, wtemp_len, temp, PATH_MAX, NULL, NULL);
+                    load_dir = temp;
+                }
+                RegCloseKey(hKey);
+            }
+        }
+#endif
         iterator = ENGINE_by_id("dynamic");
         if (!iterator || !ENGINE_ctrl_cmd_string(iterator, "ID", id, 0) ||
             !ENGINE_ctrl_cmd_string(iterator, "DIR_LOAD", "2", 0) ||
Index: openssl/crypto/rand/randfile.c
===================================================================
--- openssl.orig/crypto/rand/randfile.c
+++ openssl/crypto/rand/randfile.c
@@ -312,8 +312,12 @@ const char *RAND_file_name(char *buf, si
             return NULL;
         strcpy(buf, s);
 #ifndef OPENSSL_SYS_VMS
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+        strcat(buf, "\\");
+#else
         strcat(buf, "/");
 #endif
+#endif
         strcat(buf, RFILE);
     }
 
Index: openssl/crypto/x509/x509_def.c
===================================================================
--- openssl.orig/crypto/x509/x509_def.c
+++ openssl/crypto/x509/x509_def.c
@@ -7,6 +7,12 @@
  * https://www.openssl.org/source/license.html
  */
 
+#include <openssl/opensslconf.h>
+
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+#include <windows.h>
+#endif
+
 #include <stdio.h>
 #include "internal/cryptlib.h"
 #include <openssl/crypto.h>
@@ -14,22 +20,98 @@
 
 const char *X509_get_default_private_dir(void)
 {
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+    static char temp[PATH_MAX + 1];
+    long rc;
+    HKEY hKey;
+    rc = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\eOI", 0, KEY_READ, &hKey);
+    if (rc == ERROR_SUCCESS) {
+        WCHAR wtemp[PATH_MAX + 1];
+        DWORD wtemp_len = PATH_MAX;
+        rc = RegQueryValueExW(hKey, L"PrivateDir", NULL, NULL, (LPBYTE) wtemp, &wtemp_len);
+        if (rc == ERROR_SUCCESS) {
+            RegCloseKey(hKey);
+            WideCharToMultiByte(CP_ACP, 0, wtemp, wtemp_len, temp, PATH_MAX, NULL, NULL);
+            return temp;
+        }
+        RegCloseKey(hKey);
+    }
+    return "private";
+#else
     return X509_PRIVATE_DIR;
+#endif
 }
 
 const char *X509_get_default_cert_area(void)
 {
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+    static char temp[PATH_MAX + 1];
+    long rc;
+    HKEY hKey;
+    rc = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\eOI", 0, KEY_READ, &hKey);
+    if (rc == ERROR_SUCCESS) {
+        WCHAR wtemp[PATH_MAX + 1];
+        DWORD wtemp_len = PATH_MAX;
+        rc = RegQueryValueExW(hKey, L"CertArea", NULL, NULL, (LPBYTE) wtemp, &wtemp_len);
+        if (rc == ERROR_SUCCESS) {
+            RegCloseKey(hKey);
+            WideCharToMultiByte(CP_ACP, 0, wtemp, wtemp_len, temp, PATH_MAX, NULL, NULL);
+            return temp;
+        }
+        RegCloseKey(hKey);
+    }
+    return "conf";
+#else
     return X509_CERT_AREA;
+#endif
 }
 
 const char *X509_get_default_cert_dir(void)
 {
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+    static char temp[PATH_MAX + 1];
+    long rc;
+    HKEY hKey;
+    rc = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\eOI", 0, KEY_READ, &hKey);
+    if (rc == ERROR_SUCCESS) {
+        WCHAR wtemp[PATH_MAX + 1];
+        DWORD wtemp_len = PATH_MAX;
+        rc = RegQueryValueExW(hKey, L"CertArea", NULL, NULL, (LPBYTE) wtemp, &wtemp_len);
+        if (rc == ERROR_SUCCESS) {
+            RegCloseKey(hKey);
+            WideCharToMultiByte(CP_ACP, 0, wtemp, wtemp_len, temp, PATH_MAX, NULL, NULL);
+            return temp;
+        }
+        RegCloseKey(hKey);
+    }
+    return "certs";
+#else
     return X509_CERT_DIR;
+#endif
 }
 
 const char *X509_get_default_cert_file(void)
 {
+#if defined(OPENSSL_SYS_WINDOWS) || defined(OPENSSL_SYS_WIN32) || defined(OPENSSL_SYS_MINGW64) || defined(OPENSSL_SYS_MINGW32)
+    static char temp[PATH_MAX + 1];
+    long rc;
+    HKEY hKey;
+    rc = RegOpenKeyExW(HKEY_LOCAL_MACHINE, L"Software\\eOI", 0, KEY_READ, &hKey);
+    if (rc == ERROR_SUCCESS) {
+        WCHAR wtemp[PATH_MAX + 1];
+        DWORD wtemp_len = PATH_MAX;
+        rc = RegQueryValueExW(hKey, L"CertArea", NULL, NULL, (LPBYTE) wtemp, &wtemp_len);
+        if (rc == ERROR_SUCCESS) {
+            RegCloseKey(hKey);
+            WideCharToMultiByte(CP_ACP, 0, wtemp, wtemp_len, temp, PATH_MAX, NULL, NULL);
+            return temp;
+        }
+        RegCloseKey(hKey);
+    }
+    return "certs.pem";
+#else
     return X509_CERT_FILE;
+#endif
 }
 
 const char *X509_get_default_cert_dir_env(void)
Index: openssl/exporters/pkg-config/libcrypto.pc.in
===================================================================
--- openssl.orig/exporters/pkg-config/libcrypto.pc.in
+++ openssl/exporters/pkg-config/libcrypto.pc.in
@@ -10,6 +10,6 @@ modulesdir=${libdir}/{- $OpenSSL::safe::
 Name: OpenSSL-libcrypto
 Description: OpenSSL cryptography library
 Version: {- $OpenSSL::safe::installdata::VERSION -}
-Libs: -L${libdir} -lcrypto
+Libs: -L${libdir} -leOI32
 Libs.private: {- join(' ', @OpenSSL::safe::installdata::LDLIBS) -}
 Cflags: -I${includedir}

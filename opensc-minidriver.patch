--- a/src/minidriver/minidriver.c
+++ b/src/minidriver/minidriver.c
@@ -3064,6 +3064,8 @@
 }
 
 
+static HMODULE comctl32 = NULL;
+static HRESULT (*TaskDialogIndirectPtr)(const TASKDIALOGCONFIG *pTaskConfig, int *pnButton, int *pnRadioButton, BOOL *pfVerificationFlagChecked);
 
 static int 
 md_dialog_perform_pin_operation(PCARD_DATA pCardData, int operation, struct sc_pkcs15_card *p15card,
@@ -3166,7 +3168,12 @@
 	tc.lpCallbackData = (LONG_PTR)parameter;
 	tc.cbSize = sizeof(tc);
 
-	result = TaskDialogIndirect(&tc, NULL, NULL, &user_checked);
+	if (comctl32 == NULL)
+		comctl32 = LoadLibrary("COMCTL32.DLL");
+	if (comctl32 != NULL)
+		TaskDialogIndirectPtr = (void*)GetProcAddress(comctl32, "TaskDialogIndirect");
+	if (TaskDialogIndirectPtr != NULL)
+		result = TaskDialogIndirectPtr(&tc, NULL, NULL, &user_checked);
 
 	if (user_checked != checked) {
 		if (pv && pv->ctx && pv->ctx->exe_path) {
--- a/src/libopensc/pkcs15-eoi.c
+++ b/src/libopensc/pkcs15-eoi.c
@@ -111,6 +111,7 @@
 	 *       2 - for pinless entry (Prijava brez PIN-a), maps to 0xA1
 	 *       1 - for authentication in QES app (Podpis in prijava), maps to 0xA1
 	 *       3 - for signing in QES app (Podpis in prijava), maps to 0xA2
+	 * 3) The card falsely advertises DERIVE usage for private keys. Mask it out, as the only operation the card supports is SIGN
 	 */
 	memset(&sk, 0, sizeof(sk));
 	sk.class_mask = SC_PKCS15_SEARCH_CLASS_PRKEY;
@@ -130,6 +131,7 @@
 		if (prkey_info) {
 			privdata->prkey_mappings[j][0] = prkey_info->key_reference;
 			privdata->prkey_mappings[j++][1] = 0xA0 + (i + 1);
+			prkey_info->usage &= ~SC_PKCS15_PRKEY_USAGE_DERIVE;
 		}
 	}
 
